{"version":3,"sources":["../../server/middleware/authJWT.js"],"names":["jwt","require","passport","Strategy","jwtSecret","process","env","JWT_SECRET","adminPassword","ADMIN_PASSWORD","jwtOpts","algorithm","expiresIn","use","adminStrategy","authenticate","session","module","exports","login","ensureAdmin","ensureSeller","req","res","next","token","sign","username","user","roleType","userId","email","cookie","httpOnly","json","profile","success","payload","jwtString","headers","authorization","cookies","verify","isSeller","err","Error","statusCode","replace","password","cb","result","models","users","findOne","where","user_email","user_name","user_id","user_password","dataValues","compare","bcrypt","error","console","log"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken')\r\nconst passport = require('passport')\r\nconst Strategy = require('passport-local').Strategy\r\n\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst jwtSecret = process.env.JWT_SECRET || 'myjwt'\r\nconst adminPassword = process.env.ADMIN_PASSWORD || 'secret'\r\nconst jwtOpts = { algorithm: 'HS256', expiresIn: '30d' }\r\nimport models from '../models/init-models'\r\n\r\npassport.use(adminStrategy())\r\nconst authenticate = passport.authenticate('local', { session: false })\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    login: login,\r\n    ensureAdmin: ensureAdmin,\r\n    ensureSeller : ensureSeller\r\n}\r\n\r\n\r\nasync function login(req, res, next) {\r\n    const token = await sign({ username: req.user.username,roleType:req.user.roleType });\r\n    const {userId,username,email,roleType} = req.user;\r\n    res.cookie('jwt', token, { httpOnly: true })\r\n\r\n    res.json({ profile: {userId,username,email,roleType},success: true, token: token })\r\n}\r\n\r\nasync function sign(payload) {\r\n    const token = await jwt.sign(payload, jwtSecret, jwtOpts)\r\n    return token\r\n}\r\n\r\nasync function ensureSeller(req, res, next) {\r\n    const jwtString = req.headers.authorization || req.cookies.jwt\r\n    const payload = await verify(jwtString)\r\n    if(payload.username){\r\n        req.user = payload;\r\n        if(req.user.roleType === 'Seller') req.isSeller = true;\r\n        return next();\r\n    }\r\n\r\n    const err = new Error('Unauthorized');\r\n    err.statusCode = 401;\r\n    next(err);\r\n}\r\n\r\nasync function ensureAdmin(req, res, next) {\r\n    const jwtString = req.headers.authorization || req.cookies.jwt\r\n    const payload = await verify(jwtString)\r\n    if (payload.username === 'admin') return next()\r\n    const err = new Error('Unauthorized')\r\n    err.statusCode = 401\r\n    next(err)\r\n}\r\n\r\nasync function verify(jwtString = '') {\r\n    jwtString = jwtString.replace(/^Bearer /i, '')\r\n    try {\r\n        const payload = await jwt.verify(jwtString, jwtSecret)\r\n        return payload\r\n    } catch (err) {\r\n        err.statusCode = 401\r\n        throw err\r\n    }\r\n}\r\n\r\nfunction adminStrategy() {\r\n\r\n    return new Strategy(async function (username, password, cb) {\r\n        try {\r\n            const result = await models.users.findOne({\r\n                where: { user_email: username }\r\n            });\r\n            \r\n            const { user_name, user_id, user_password, user_email } = result.dataValues;\r\n            const compare = await bcrypt.compare(password, user_password);\r\n\r\n            if (compare) return cb(null, { username: user_name, userId: user_id, email: user_email})\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        cb(null, false)\r\n    })\r\n}"],"file":"authJWT.js"}