{"version":3,"sources":["../server/index.js"],"names":["port","process","env","PORT","app","use","express","json","urlencoded","extended","req","res","next","context","models","URL_API","routes","categoryRoute","prodImgRoute","productRoute","userRoute","cartRoute","orderRoute","middleware","handleError","notFound","dropDatabaseSync","sequelize","sync","force","then","console","log","listen"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAACC,EAAAA,QAAQ,EAAG;AAAZ,CAAnB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,4BAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,sBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,2BAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,oBAAR;AAEAD,GAAG,CAACC,GAAJ,CAAQ,OAAMK,GAAN,EAAUC,GAAV,EAAcC,IAAd,KAAqB;AACzBF,EAAAA,GAAG,CAACG,OAAJ,GAAc;AAACC,IAAAA,MAAM,EAANA;AAAD,GAAd;AACAF,EAAAA,IAAI;AACP,CAHD;AAKAR,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,WAA5B,EAAyCC,oBAAOC,aAAhD;AACAb,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,aAA5B,EAA0CC,oBAAOE,YAAjD;AACAd,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,UAA5B,EAAuCC,oBAAOG,YAA9C;AACAf,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,OAA5B,EAAoCC,oBAAOI,SAA3C;AACAhB,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,OAA5B,EAAoCC,oBAAOK,SAA3C;AACAjB,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYa,OAAZ,GAAoB,QAA5B,EAAqCC,oBAAOM,UAA5C;AACAlB,GAAG,CAACC,GAAJ,CAAQkB,oBAAWC,WAAnB;AACApB,GAAG,CAACC,GAAJ,CAAQkB,oBAAWE,QAAnB;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;;AAEAC,sBAAUC,IAAV,CAAe;AAACC,EAAAA,KAAK,EAAGH;AAAT,CAAf,EAA2CI,IAA3C,CAAgD,YAAS;AACrD,MAAIJ,gBAAJ,EAAsB;AAClBK,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AACD5B,EAAAA,GAAG,CAAC6B,MAAJ,CAAWjC,IAAX,EAAgB,MAAI;AAAC+B,IAAAA,OAAO,CAACC,GAAR,CAAa,+BAA8BhC,IAAK,EAAhD;AAAmD,GAAxE;AACH,CALD;;eAOeI,G","sourcesContent":["import \"dotenv/config\";\r\nimport express from \"express\";\r\nimport cors from \"cors\";\r\nimport compress from \"compression\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport helmet from \"helmet\";\r\nimport models,{sequelize} from \"./models/init-models\";\r\nimport routes from \"./routes/indexRoute\";\r\nimport middleware from \"./middleware/middleware\";\r\n\r\nconst port = process.env.PORT || 3007;\r\nconst app = express();\r\n\r\napp.use(express.json())\r\napp.use(express.urlencoded({extended : true}))\r\napp.use(cookieParser())\r\napp.use(helmet())\r\napp.use(compress())\r\napp.use(cors())\r\n\r\napp.use(async(req,res,next)=>{\r\n    req.context = {models}\r\n    next();\r\n})\r\n\r\napp.use(process.env.URL_API+\"/category\", routes.categoryRoute)\r\napp.use(process.env.URL_API+\"/productImg\",routes.prodImgRoute)\r\napp.use(process.env.URL_API+\"/product\",routes.productRoute)\r\napp.use(process.env.URL_API+\"/user\",routes.userRoute)\r\napp.use(process.env.URL_API+\"/cart\",routes.cartRoute)\r\napp.use(process.env.URL_API+\"/order\",routes.orderRoute)\r\napp.use(middleware.handleError)\r\napp.use(middleware.notFound)\r\n\r\nconst dropDatabaseSync = false;\r\n\r\nsequelize.sync({force : dropDatabaseSync}).then(async()=>{\r\n    if (dropDatabaseSync) {\r\n        console.log(\"database do not drop\");\r\n    }\r\n    app.listen(port,()=>{console.log(`server is listening on port ${port}`)})\r\n})\r\n\r\nexport default app"],"file":"index.js"}