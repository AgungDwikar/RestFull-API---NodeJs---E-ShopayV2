{"version":3,"sources":["../../server/controller/productImageController.js"],"names":["createProductImage","req","res","next","files","fields","fileAttrb","prodId","parseInt","value","prodImage","prim_filename","undefined","prim_filesize","prim_filetype","prim_primary","prim_prod_id","listImages","forEach","el","file","newFilename","size","mimetype","push","result","context","models","products_images","bulkCreate","send","error","status","json","message","findProdImagesById","findAll","where","prim_id","params","id"],"mappings":";;;;;;;AACA,MAAMA,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBJ,GAAG,CAACK,SAA9B;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAX,CAAvB;AAEA,MAAIC,SAAS,GAAG;AACZC,IAAAA,aAAa,EAAEC,SADH;AAEZC,IAAAA,aAAa,EAAED,SAFH;AAGZE,IAAAA,aAAa,EAAEF,SAHH;AAIZG,IAAAA,YAAY,EAAE,KAJF;AAKZC,IAAAA,YAAY,EAAEJ;AALF,GAAhB;AAQA,QAAMK,UAAU,GAAG,EAAnB;AAEAb,EAAAA,KAAK,CAACc,OAAN,CAAcC,EAAE,IAAI;AAChBT,IAAAA,SAAS,GAAG;AACRC,MAAAA,aAAa,EAAEQ,EAAE,CAACC,IAAH,CAAQC,WADf;AAERR,MAAAA,aAAa,EAAEM,EAAE,CAACC,IAAH,CAAQE,IAFf;AAGRR,MAAAA,aAAa,EAAEK,EAAE,CAACC,IAAH,CAAQG,QAHf;AAIRR,MAAAA,YAAY,EAAE,KAJN;AAKRC,MAAAA,YAAY,EAAET;AALN,KAAZ;AAOAU,IAAAA,UAAU,CAACO,IAAX,CAAgBd,SAAhB;AACH,GATD,EAdiD,CAyBjD;;AACA,MAAI;AACA,UAAMe,MAAM,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,MAAZ,CAAmBC,eAAnB,CAAmCC,UAAnC,CACjBZ,UADiB,CAArB;AAGAf,IAAAA,GAAG,CAAC4B,IAAJ,CAASL,MAAT;AACH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZ,WAAO7B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAGH,KAAK,CAACG;AAAjB,KAArB,CAAP;AACH;AACJ,CAlCD;;AAoCA,MAAMC,kBAAkB,GAAG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAI;AACA,UAAMuB,MAAM,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,MAAZ,CAAmBC,eAAnB,CAAmCQ,OAAnC,CACjB;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAErC,GAAG,CAACsC,MAAJ,CAAWC;AAAtB;AAAT,KADiB,CAArB;AAGA,WAAOtC,GAAG,CAAC4B,IAAJ,CAASL,MAAT,CAAP;AACH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZ,WAAO7B,GAAG,CAAC4B,IAAJ,CAAS,GAAT,EAAcA,IAAd,CAAmBC,KAAnB,CAAP;AACH;AAEJ,CAVD;;AAWA,MAAMK,OAAO,GAAG,OAAOnC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,MAAI;AACA,UAAMuB,MAAM,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,MAAZ,CAAmBC,eAAnB,CAAmCQ,OAAnC,EAArB;AACA,WAAOlC,GAAG,CAAC4B,IAAJ,CAASL,MAAT,CAAP;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,WAAO7B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,eAArB,CAAP;AACH;AACJ,CAPD,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;eAEe;AACXK,EAAAA,kBADW;AAEXnC,EAAAA,kBAFW;AAGXoC,EAAAA;AAHW,C","sourcesContent":["\r\nconst createProductImage = async (req, res, next) => {\r\n    const { files, fields } = req.fileAttrb;\r\n    const prodId = parseInt(fields[0].value);\r\n\r\n    let prodImage = {\r\n        prim_filename: undefined,\r\n        prim_filesize: undefined,\r\n        prim_filetype: undefined,\r\n        prim_primary: false,\r\n        prim_prod_id: undefined\r\n    }\r\n\r\n    const listImages = [];\r\n\r\n    files.forEach(el => {\r\n        prodImage = {\r\n            prim_filename: el.file.newFilename,\r\n            prim_filesize: el.file.size,\r\n            prim_filetype: el.file.mimetype,\r\n            prim_primary: false,\r\n            prim_prod_id: prodId\r\n        }\r\n        listImages.push(prodImage)\r\n    });\r\n\r\n    //insert into product_images\r\n    try {\r\n        const result = await req.context.models.products_images.bulkCreate(\r\n            listImages\r\n        );\r\n        res.send(result);\r\n    } catch (error) {\r\n        return res.status(404).json({message : error.message})\r\n    }\r\n}\r\n\r\nconst findProdImagesById = async (req, res) => {\r\n    try {\r\n        const result = await req.context.models.products_images.findAll(\r\n            { where: { prim_id: req.params.id} }\r\n        );\r\n        return res.send(result);\r\n    } catch (error) {\r\n        return res.send(404).send(error);\r\n    }\r\n\r\n}\r\nconst findAll = async (req, res) => {\r\n    try {\r\n        const result = await req.context.models.products_images.findAll();\r\n        return res.send(result);\r\n    } catch (error) {\r\n        return res.status(404).send(\"no data found\");\r\n    }\r\n}\r\n// const findOne = async (req,res) => {\r\n//     try {\r\n//         const result = await req.context.models.products_images.findOne({\r\n//             where:{prim_id:req.params.id}\r\n//         })\r\n//         return res.send(result)\r\n//     } catch (error) {\r\n//         return res.status(404).send(\"no data found\")\r\n//     }\r\n// }\r\n\r\nexport default {\r\n    findProdImagesById,\r\n    createProductImage,\r\n    findAll,\r\n}"],"file":"productImageController.js"}